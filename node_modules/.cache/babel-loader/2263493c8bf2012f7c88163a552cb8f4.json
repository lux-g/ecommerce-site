{"ast":null,"code":"var _jsxFileName = \"/Users/lux/Desktop/websites/REACT/THREEJS-ECOMMERCE/three-site/src/components/Header.js\";\nimport React from 'react';\nimport { useEffect } from 'react';\nimport * as THREE from \"three\";\nimport images from '../images';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Header = () => {\n  // //THREE JS \n  // useEffect(()=> {\n  //     function lerp(start, end, t){\n  //         return start * (1 - t) + end * t;\n  //     }\n  //     //mouse cords\n  //     let targetX = 0;\n  //     let targetY = 0;\n  //     //load image textures for mesh\n  //     const textureOne = new THREE.TextureLoader().load(images.imageOne);\n  //     const textureTwo = new THREE.TextureLoader().load(images.imageTwo);\n  //     const textureThree = new THREE.TextureLoader().load(images.imageThree);\n  //     class webgl{\n  //         constructor(){\n  //             this.container = document.querySelector('main');\n  //             this.links = [...document.querySelectorAll('span')];\n  //             this.scene = new THREE.Scene();\n  //             this.perspective = 1000;\n  //             this.sizes = new THREE.Vector2(0, 0); //mesh sizes\n  //             this.offset = new THREE.Vector2(0, 0) //mesh position\n  //             this.uniforms = {\n  //                 uTexture: { value: textureOne},\n  //                 uAlpha: { value: 0.0},//opacity of mesh\n  //                 uOffset: { value: new THREE.Vector2(0.0, 0.0)}//postion of mesh for curve efx\n  //             }\n  //             this.links.forEach((link, idx)=> {\n  //                 link.addEventListener('mouseenter', ()=> {\n  //                     switch(idx){\n  //                         case 0:\n  //                             this.uniforms.uTexture.value = textureOne;\n  //                             break;\n  //                         case 1: \n  //                             this.uniforms.uTexture.value = textureTwo;\n  //                             break;\n  //                         case 2:\n  //                             this.uniforms.uTexture.value = textureThree;\n  //                             break;\n  //                     }\n  //                 })\n  //             })\n  //             this.addEventListeners(document.querySelector('h1'));\n  //             this.setupCamera();\n  //             this.onMouseMove();\n  //             this.createMesh();\n  //             this.render();\n  //         }\n  //         get viewport(){\n  //             let width = window.innerWidth;\n  //             let height = window.innerHeight;\n  //             let aspectRatio = width / height;\n  //             return {\n  //                 width,\n  //                 height,\n  //                 aspectRatio\n  //             }\n  //         }\n  //         onMouseMove(){\n  //             window.addEventListener('mousemove', (e)=> {\n  //                 targetX = e.clientX;\n  //                 targetY = e.clientY;\n  //             })\n  //         }\n  //         addEventListeners(element){\n  //             element.addEventListener('mouseenter', ()=> {\n  //                 this.linksHover = true;\n  //             })\n  //             element.addEventListener('mouseleave', ()=> {\n  //                 this.linksHover = false;\n  //             })\n  //         }\n  //         setupCamera(){\n  //             //adjust dimensions on resize\n  //             window.addEventListener('resize', this.onWindowResize.bind(this))\n  //             let fov = (180 * (2 * Math.atan(this.viewport.height / 2 / this.perspective))) / Math.PI;\n  //             this.camera = new THREE.PerspectiveCamera(fov, this.viewport.aspectRatio, 0.1, 1000);\n  //             this.camera.position.set(0, 0 , this.perspective);\n  //             this.renderer = new THREE.WebGL1Renderer({antialias: true,alpha: true });\n  //             this.renderer.setSize(this.viewport.width, this.viewport.height);\n  //             this.renderer.setPixelRatio(window.devicePixelRatio);\n  //             this.container.appendChild(this.renderer.domElement)\n  //         }\n  //         onWindowResize(){\n  //             this.camera.aspect = this.viewport.aspectRatio;\n  //             this.camera.fov = (180 * (2 * Math.atan(this.viewport.height / 2 / this.perspective))) / Math.PI;\n  //             this.renderer.setSize(this.viewport.width, this.viewport.height);\n  //             this.camera.updateProjectionMatrix();\n  //         }\n  //         createMesh(){\n  //             this.geometry = new THREE.PlaneBufferGeometry(1, 1, 20, 20);\n  //             //this.material = new THREE.MeshBasicMaterial({color: 0xff0000});\n  //             this.material = new THREE.ShaderMaterial({\n  //                 uniforms: this.uniforms,\n  //                 vertexShader: `\n  //                     uniform sampler2D uTexture;\n  //                     uniform vec2 uOffset;\n  //                     varying vec2 vUv;\n  //                     float M_PI = 3.141529;\n  //                     vec3 deformationCurve(vec3 position, vec2 uv, vec2 offset){\n  //                         position.x = position.x + (sin(uv.y * M_PI) * offset.x);\n  //                         position.y = position.y + (sin(uv.x * M_PI) * offset.y);\n  //                         return position;\n  //                     }\n  //                     void main(){\n  //                         vUv = uv;\n  //                         vec3 newPosition = deformationCurve(position, uv, uOffset);\n  //                         gl_Position = projectionMatrix * modelViewMatrix * vec4(newPosition, 1.0);\n  //                     }\n  //                 `,\n  //                 fragmentShader: `\n  //                     uniform sampler2D uTexture;\n  //                     uniform float uAlpha;\n  //                     uniform vec2 uOffset;\n  //                     varying vec2 vUv;\n  //                     vec3 rgbShift(sampler2D textureimage, vec2 uv, vec2 offset ){\n  //                         float r = texture2D(textureimage, uv + offset).r;\n  //                         vec2 gb = texture2D(textureimage, uv).gb;\n  //                         return vec3(r, gb);\n  //                     }\n  //                     void main(){\n  //                         // vec3 color = texture2D(uTexture, vUv).rgb;\n  //                         vec3 color = rgbShift(uTexture, vUv, uOffset);\n  //                         gl_FragColor = vec4(color, uAlpha);\n  //                     }\n  //                 `,\n  //                 transparent: true\n  //             })\n  //             this.mesh = new THREE.Mesh(this.geometry, this.material);\n  //             this.sizes.set(250, 350, 1);\n  //             this.mesh.scale.set(this.sizes.x, this.sizes.y, 1);\n  //             this.mesh.position.set(this.offset.x, this.offset.y);\n  //             this.scene.add(this.mesh);\n  //         }\n  //         render(){\n  //             this.renderer.render(this.scene, this.camera);\n  //             this.offset.x = lerp(this.offset.x, targetX, 0.1);\n  //             this.offset.y = lerp(this.offset.y, targetY, 0.1);\n  //             //this.uniforms.uOffset.value.set((targetX - this.offset.x) * 0.0005, - (targetY - this.offset.y) * 0.0005);\n  //             this.linksHover\n  //             ? this.uniforms.uAlpha.value = lerp(this.uniforms.uAlpha.value, 1.0, 1.0)\n  //             : this.uniforms.uAlpha.value = lerp(this.uniforms.uAlpha.value, 0.0, 0.1)\n  //             this.mesh.position.set(this.offset.x - (window.innerWidth / 2), -this.offset.y + (window.innerHeight / 2));\n  //             window.requestAnimationFrame(this.render.bind(this));\n  //         }\n  //     }\n  //     new webgl();\n  // })\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"hero\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"hero__title\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"hero__nine\",\n            children: \"NINE\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"hero__fifty\",\n            children: \"FIFTY\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"her__store\",\n            children: \"STORE\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"quality\",\n          children: \"QUALITY STREETWEAR CLOTHING\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/about\",\n          className: \"hero__about\",\n          children: \"ABOUT US\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/shop\",\n          className: \"hero__shop\",\n          children: \"SHOP NOW\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Header;\nexport default Header;\n\nvar _c;\n\n$RefreshReg$(_c, \"Header\");","map":{"version":3,"sources":["/Users/lux/Desktop/websites/REACT/THREEJS-ECOMMERCE/three-site/src/components/Header.js"],"names":["React","useEffect","THREE","images","Link","Header"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAAyB,OAAzB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,SAASC,IAAT,QAAqB,kBAArB;;;AAGA,MAAMC,MAAM,GAAG,MAAM;AAEjsBACI;AAAA,2BACI;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,6BACI;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA,gCACI;AAAA,kCACI;AAAM,YAAA,SAAS,EAAC,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAA;AAAA;AAAA;AAAA,kBAFJ,eAGI;AAAM,YAAA,SAAS,EAAC,aAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHJ,eAII;AAAA;AAAA;AAAA;AAAA,kBAJJ,eAKI;AAAM,YAAA,SAAS,EAAC,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBALJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAQI;AAAG,UAAA,SAAS,EAAC,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBARJ,eASI,QAAC,IAAD;AAAM,UAAA,EAAE,EAAC,QAAT;AAAkB,UAAA,SAAS,EAAC,aAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBATJ,eAUI,QAAC,IAAD;AAAM,UAAA,EAAE,EAAC,OAAT;AAAiB,UAAA,SAAS,EAAC,YAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAVJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAkBH,CA9LD;;KAAMA,M;AAgMN,eAAeA,MAAf","sourcesContent":["import React from 'react'\nimport { useEffect} from 'react'\nimport * as THREE from \"three\";\nimport images from '../images'\nimport { Link } from 'react-router-dom'\n\n\nconst Header = () => {\n\n    // //THREE JS \n    // useEffect(()=> {\n    //     function lerp(start, end, t){\n    //         return start * (1 - t) + end * t;\n    //     }\n\n    //     //mouse cords\n    //     let targetX = 0;\n    //     let targetY = 0;\n\n    //     //load image textures for mesh\n    //     const textureOne = new THREE.TextureLoader().load(images.imageOne);\n    //     const textureTwo = new THREE.TextureLoader().load(images.imageTwo);\n    //     const textureThree = new THREE.TextureLoader().load(images.imageThree);\n\n    //     class webgl{\n    //         constructor(){\n    //             this.container = document.querySelector('main');\n    //             this.links = [...document.querySelectorAll('span')];\n    //             this.scene = new THREE.Scene();\n    //             this.perspective = 1000;\n    //             this.sizes = new THREE.Vector2(0, 0); //mesh sizes\n    //             this.offset = new THREE.Vector2(0, 0) //mesh position\n    //             this.uniforms = {\n    //                 uTexture: { value: textureOne},\n    //                 uAlpha: { value: 0.0},//opacity of mesh\n    //                 uOffset: { value: new THREE.Vector2(0.0, 0.0)}//postion of mesh for curve efx\n    //             }\n    //             this.links.forEach((link, idx)=> {\n    //                 link.addEventListener('mouseenter', ()=> {\n    //                     switch(idx){\n    //                         case 0:\n    //                             this.uniforms.uTexture.value = textureOne;\n    //                             break;\n    //                         case 1: \n    //                             this.uniforms.uTexture.value = textureTwo;\n    //                             break;\n    //                         case 2:\n    //                             this.uniforms.uTexture.value = textureThree;\n    //                             break;\n    //                     }\n    //                 })\n    //             })\n\n    //             this.addEventListeners(document.querySelector('h1'));\n    //             this.setupCamera();\n    //             this.onMouseMove();\n    //             this.createMesh();\n    //             this.render();\n    //         }\n\n    //         get viewport(){\n    //             let width = window.innerWidth;\n    //             let height = window.innerHeight;\n    //             let aspectRatio = width / height;\n\n    //             return {\n    //                 width,\n    //                 height,\n    //                 aspectRatio\n    //             }\n    //         }\n\n    //         onMouseMove(){\n    //             window.addEventListener('mousemove', (e)=> {\n    //                 targetX = e.clientX;\n    //                 targetY = e.clientY;\n    //             })\n    //         }\n\n    //         addEventListeners(element){\n    //             element.addEventListener('mouseenter', ()=> {\n    //                 this.linksHover = true;\n    //             })\n    //             element.addEventListener('mouseleave', ()=> {\n    //                 this.linksHover = false;\n    //             })\n    //         }\n\n    //         setupCamera(){\n    //             //adjust dimensions on resize\n    //             window.addEventListener('resize', this.onWindowResize.bind(this))\n                \n    //             let fov = (180 * (2 * Math.atan(this.viewport.height / 2 / this.perspective))) / Math.PI;\n    //             this.camera = new THREE.PerspectiveCamera(fov, this.viewport.aspectRatio, 0.1, 1000);\n    //             this.camera.position.set(0, 0 , this.perspective);\n\n    //             this.renderer = new THREE.WebGL1Renderer({antialias: true,alpha: true });\n    //             this.renderer.setSize(this.viewport.width, this.viewport.height);\n    //             this.renderer.setPixelRatio(window.devicePixelRatio);\n    //             this.container.appendChild(this.renderer.domElement)\n    //         }\n\n    //         onWindowResize(){\n    //             this.camera.aspect = this.viewport.aspectRatio;\n    //             this.camera.fov = (180 * (2 * Math.atan(this.viewport.height / 2 / this.perspective))) / Math.PI;\n    //             this.renderer.setSize(this.viewport.width, this.viewport.height);\n    //             this.camera.updateProjectionMatrix();\n    //         }\n\n    //         createMesh(){\n    //             this.geometry = new THREE.PlaneBufferGeometry(1, 1, 20, 20);\n    //             //this.material = new THREE.MeshBasicMaterial({color: 0xff0000});\n    //             this.material = new THREE.ShaderMaterial({\n    //                 uniforms: this.uniforms,\n    //                 vertexShader: `\n    //                     uniform sampler2D uTexture;\n    //                     uniform vec2 uOffset;\n    //                     varying vec2 vUv;\n\n    //                     float M_PI = 3.141529;\n\n    //                     vec3 deformationCurve(vec3 position, vec2 uv, vec2 offset){\n    //                         position.x = position.x + (sin(uv.y * M_PI) * offset.x);\n    //                         position.y = position.y + (sin(uv.x * M_PI) * offset.y);\n    //                         return position;\n    //                     }\n\n    //                     void main(){\n    //                         vUv = uv;\n    //                         vec3 newPosition = deformationCurve(position, uv, uOffset);\n    //                         gl_Position = projectionMatrix * modelViewMatrix * vec4(newPosition, 1.0);\n    //                     }\n    //                 `,\n    //                 fragmentShader: `\n    //                     uniform sampler2D uTexture;\n    //                     uniform float uAlpha;\n    //                     uniform vec2 uOffset;\n    //                     varying vec2 vUv;\n\n    //                     vec3 rgbShift(sampler2D textureimage, vec2 uv, vec2 offset ){\n    //                         float r = texture2D(textureimage, uv + offset).r;\n    //                         vec2 gb = texture2D(textureimage, uv).gb;\n    //                         return vec3(r, gb);\n    //                     }\n\n    //                     void main(){\n    //                         // vec3 color = texture2D(uTexture, vUv).rgb;\n    //                         vec3 color = rgbShift(uTexture, vUv, uOffset);\n    //                         gl_FragColor = vec4(color, uAlpha);\n    //                     }\n    //                 `,\n    //                 transparent: true\n    //             })\n    //             this.mesh = new THREE.Mesh(this.geometry, this.material);\n    //             this.sizes.set(250, 350, 1);\n    //             this.mesh.scale.set(this.sizes.x, this.sizes.y, 1);\n    //             this.mesh.position.set(this.offset.x, this.offset.y);\n    //             this.scene.add(this.mesh);\n    //         }\n\n    //         render(){\n    //             this.renderer.render(this.scene, this.camera);\n    //             this.offset.x = lerp(this.offset.x, targetX, 0.1);\n    //             this.offset.y = lerp(this.offset.y, targetY, 0.1);\n    //             //this.uniforms.uOffset.value.set((targetX - this.offset.x) * 0.0005, - (targetY - this.offset.y) * 0.0005);\n\n    //             this.linksHover\n    //             ? this.uniforms.uAlpha.value = lerp(this.uniforms.uAlpha.value, 1.0, 1.0)\n    //             : this.uniforms.uAlpha.value = lerp(this.uniforms.uAlpha.value, 0.0, 0.1)\n\n    //             this.mesh.position.set(this.offset.x - (window.innerWidth / 2), -this.offset.y + (window.innerHeight / 2));\n    //             window.requestAnimationFrame(this.render.bind(this));\n    //         }\n    //     }\n\n\n    //     new webgl();\n    // })\n\n    return (\n        <main>\n            <div className=\"hero\">\n                <div className=\"hero__title\">\n                    <h1>\n                        <span className=\"hero__nine\">NINE</span> \n                        <br/> \n                        <span className=\"hero__fifty\">FIFTY</span>\n                        <br/>\n                        <span className=\"her__store\">STORE</span>\n                    </h1>\n                    <p className=\"quality\">QUALITY STREETWEAR CLOTHING</p>\n                    <Link to=\"/about\" className=\"hero__about\">ABOUT US</Link>\n                    <Link to=\"/shop\" className=\"hero__shop\">SHOP NOW</Link>\n                </div>\n            </div>\n        </main>\n    )\n}\n\nexport default Header\n"]},"metadata":{},"sourceType":"module"}