{"ast":null,"code":"var _jsxFileName = \"/Users/lux/Desktop/WEBSITES FOR PORTFOLIO/THREEJS-ECOMMERCE/three-site/src/components/About.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useEffect } from 'react';\nimport storeImg from '../images/store.webp';\nimport displacement from '../images/diss.png';\nimport { motion } from \"framer-motion\";\nimport * as THREE from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst About = () => {\n  _s();\n\n  //THREE JS\n  useEffect(() => {\n    class Sketch {\n      constructor() {\n        this.time = 0;\n        this.container = document.querySelector('.container');\n        this.scene = new THREE.Scene();\n        this.width = this.container.offsetWidth;\n        this.height = this.container.offsetHeight;\n        this.camera = new THREE.PerspectiveCamera(70, this.width / this.height, 0.01, 10);\n        this.camera.position.z = 1;\n        this.renderer = new THREE.WebGL1Renderer({\n          antialias: true\n        });\n        this.container.appendChild(this.renderer.domElement);\n        this.mouse = new THREE.Vector2();\n        this.resize();\n        this.setupResize();\n        this.addObjects();\n        this.mouseMovement();\n        this.render();\n      }\n\n      setupResize() {\n        window.addEventListener('resize', this.resize.bind(this));\n      }\n\n      mouseMovement() {\n        window.addEventListener('mousemove', event => {\n          this.mouse.x = event.clientX / this.width * 2 - 1;\n          this.mouse.y = event.clientY / this.height * 2 + 1;\n        }, false);\n      }\n\n      resize() {\n        this.width = this.container.offsetWidth;\n        this.height = this.container.offsetHeight;\n        this.renderer.setSize(this.width, this.height);\n        this.camera.aspect = this.width / this.height;\n        this.camera.updateProjectionMatrix();\n      }\n\n      addObjects() {\n        this.geometry = new THREE.PlaneGeometry(2.1, 1.6, 40, 40);\n        this.material = new THREE.MeshNormalMaterial();\n        this.material = new THREE.ShaderMaterial({\n          uniforms: {\n            time: {\n              type: \"f\",\n              value: 0\n            },\n            mouse: {\n              type: \"v3\",\n              value: new THREE.Vector3()\n            },\n            hover: {\n              value: new THREE.Vector2(0.5, 0.5)\n            },\n            hoverState: {\n              value: 0\n            },\n            oceanTexture: {\n              type: \"t\",\n              value: new THREE.TextureLoader().load(storeImg)\n            },\n            displacement: {\n              type: \"t\",\n              value: new THREE.TextureLoader().load(displacement)\n            },\n            resolution: {\n              type: \"v4\",\n              value: new THREE.Vector4()\n            },\n            uvRate1: {\n              value: new THREE.Vector2(1, 1)\n            }\n          },\n          fragmentShader: `\n                        uniform sampler2D oceanTexture;\n                        uniform sampler2D displacement;\n                        varying vec2 vUv;\n                        varying float vNoise;\n                        uniform float time;\n\n\n                        varying vec3 vPosition;\n                        uniform vec3 mouse;\n\n\n                        float map(float value, float min1, float max1, float min2, float max2) {\n                        return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n                        }\n\n                        void main(){\n\n                            vec2 newUV = vUv;\n                            newUV = vec2(newUV.x, newUV.y + 0.009*sin(newUV.x*20. + time));\n                            vec4 displace = texture2D(displacement, vUv.yx );\n\n                            vec2 direction = normalize(vPosition.xy - mouse.xy);\n\n                            float dist = distance(vPosition,mouse);\n\n                            float prox = 1. - map(dist, 0., 0.3, 0., 1.);\n                            prox = clamp(prox, 0., 1.);\n\n\n                            vec2 zoomedUV = vUv + direction * prox * 0.02;\n\n                            vec2 zoomedUV1 = mix(vUv, mouse.xy + vec2(0.5), prox * 0.2);\n                            vec4 color = texture2D(oceanTexture, zoomedUV1);\n\n                            gl_FragColor = color;\n                        }\n                    `,\n          vertexShader: `\n                        varying vec2 vUv;\n                        uniform float time;\n                        uniform vec2 hover;\n                        varying float noise;\n                        varying float vNoise;\n                        varying vec3 vPosition;\n\n                        //\tClassic Perlin 3D Noise \n                        //\tby Stefan Gustavson\n                        //\n                        vec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\n                        vec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\n                        vec3 fade(vec3 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}\n\n                        float cnoise(vec3 P){\n                        vec3 Pi0 = floor(P); // Integer part for indexing\n                        vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n                        Pi0 = mod(Pi0, 289.0);\n                        Pi1 = mod(Pi1, 289.0);\n                        vec3 Pf0 = fract(P); // Fractional part for interpolation\n                        vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n                        vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n                        vec4 iy = vec4(Pi0.yy, Pi1.yy);\n                        vec4 iz0 = Pi0.zzzz;\n                        vec4 iz1 = Pi1.zzzz;\n\n                        vec4 ixy = permute(permute(ix) + iy);\n                        vec4 ixy0 = permute(ixy + iz0);\n                        vec4 ixy1 = permute(ixy + iz1);\n\n                        vec4 gx0 = ixy0 / 7.0;\n                        vec4 gy0 = fract(floor(gx0) / 7.0) - 0.5;\n                        gx0 = fract(gx0);\n                        vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n                        vec4 sz0 = step(gz0, vec4(0.0));\n                        gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n                        gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n                        vec4 gx1 = ixy1 / 7.0;\n                        vec4 gy1 = fract(floor(gx1) / 7.0) - 0.5;\n                        gx1 = fract(gx1);\n                        vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n                        vec4 sz1 = step(gz1, vec4(0.0));\n                        gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n                        gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n                        vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n                        vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n                        vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n                        vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n                        vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n                        vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n                        vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n                        vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n                        vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n                        g000 *= norm0.x;\n                        g010 *= norm0.y;\n                        g100 *= norm0.z;\n                        g110 *= norm0.w;\n                        vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n                        g001 *= norm1.x;\n                        g011 *= norm1.y;\n                        g101 *= norm1.z;\n                        g111 *= norm1.w;\n\n                        float n000 = dot(g000, Pf0);\n                        float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n                        float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n                        float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n                        float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n                        float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n                        float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n                        float n111 = dot(g111, Pf1);\n\n                        vec3 fade_xyz = fade(Pf0);\n                        vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n                        vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n                        float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); \n                        return 2.2 * n_xyz;\n                        }\n\n\n                        void main(){\n                            vec3 newposition = position;\n                            float PI = 3.1415925;\n\n                            float noise = cnoise(3.*vec3(position.x, position.y, position.z + time/80.));\n\n                            newposition.z += 0.2*cnoise(vec3(position.x*1.,position.y*1. + time/25.,0.));\n\n                            vUv = uv;\n\n                            vPosition = position;\n\n                            gl_Position = projectionMatrix * modelViewMatrix * vec4( newposition, 1.0);\n                        }\n                    `\n        });\n        this.mesh = new THREE.Mesh(this.geometry, this.material);\n        this.scene.add(this.mesh);\n      }\n\n      render() {\n        this.time += 0.05;\n        this.material.uniforms.time.value = this.time;\n        this.renderer.render(this.scene, this.camera);\n        window.requestAnimationFrame(this.render.bind(this));\n      }\n\n    }\n\n    new Sketch();\n  }, [new Sketch()]);\n  useEffect(() => {\n    let vh = window.innerHeight * 0.01; // Then we set the value in the --vh custom property to the root of the document\n\n    document.documentElement.style.setProperty('--vh', `${vh}px`);\n  });\n  useEffect(() => {\n    window.addEventListener('resize', () => {\n      // We execute the same script as before\n      let vh = window.innerHeight * 0.01;\n      document.documentElement.style.setProperty('--vh', `${vh}px`);\n    });\n  });\n  return /*#__PURE__*/_jsxDEV(motion.div, {\n    \"data-scroll-section\": true,\n    initial: {\n      opacity: 0\n    },\n    animate: {\n      opacity: 1\n    },\n    transition: {\n      duration: 1\n    },\n    exit: {\n      opacity: 0\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"about-page\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"about-page__text\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"9 Fifty is deeply rooted in street culture with a luxury aesthetic. We grew to embody culture, and play an integral part in its constant regeneration. Skaters, punks, hip-hop heads and the young counter culture at large. 9 Fifty established itself as a brand known for its quality, style, and authenticity, made for artists, photographers, designers, musicians, filmmakers, and writers who defied conventions and contributed to its unique identity and attitude.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 248,\n    columnNumber: 9\n  }, this);\n};\n\n_s(About, \"ewq31d5h+FnD/qJW52w5UqeNMN4=\");\n\n_c = About;\nexport default About;\n\nvar _c;\n\n$RefreshReg$(_c, \"About\");","map":{"version":3,"sources":["/Users/lux/Desktop/WEBSITES FOR PORTFOLIO/THREEJS-ECOMMERCE/three-site/src/components/About.js"],"names":["React","useEffect","storeImg","displacement","motion","THREE","About","Sketch","constructor","time","container","document","querySelector","scene","Scene","width","offsetWidth","height","offsetHeight","camera","PerspectiveCamera","position","z","renderer","WebGL1Renderer","antialias","appendChild","domElement","mouse","Vector2","resize","setupResize","addObjects","mouseMovement","render","window","addEventListener","bind","event","x","clientX","y","clientY","setSize","aspect","updateProjectionMatrix","geometry","PlaneGeometry","material","MeshNormalMaterial","ShaderMaterial","uniforms","type","value","Vector3","hover","hoverState","oceanTexture","TextureLoader","load","resolution","Vector4","uvRate1","fragmentShader","vertexShader","mesh","Mesh","add","requestAnimationFrame","vh","innerHeight","documentElement","style","setProperty","opacity","duration"],"mappings":"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CiD,cAAAA,IAAI,EAAE,GAAP;AAAYC,cAAAA,KAAK,EAAE,IAAIhD,KAAK,CAACqD,aAAV,GAA0BC,IAA1B,CAA+BxD,YAA/B;AAAnB,aANR;AAONyD,YAAAA,UAAU,EAAE;AAACR,cAAAA,IAAI,EAAE,IAAP;AAAaC,cAAAA,KAAK,EAAE,IAAIhD,KAAK,CAACwD,OAAV;AAApB,aAPN;AAQNC,YAAAA,OAAO,EAAE;AAACT,cAAAA,KAAK,EAAE,IAAIhD,KAAK,CAACwB,OAAV,CAAkB,CAAlB,EAAqB,CAArB;AAAR;AARH,WAD2B;AAWrCkC,UAAAA,cAAc,EAAG;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAhDyD;AAiDrCC,UAAAA,YAAY,EAAG;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnJyD,SAAzB,CAAhB;AAuJA,aAAKC,IAAL,GAAY,IAAI5D,KAAK,CAAC6D,IAAV,CAAe,KAAKpB,QAApB,EAA8B,KAAKE,QAAnC,CAAZ;AACA,aAAKnC,KAAL,CAAWsD,GAAX,CAAe,KAAKF,IAApB;AACH;;AAED/B,MAAAA,MAAM,GAAE;AACJ,aAAKzB,IAAL,IAAW,IAAX;AAEA,aAAKuC,QAAL,CAAcG,QAAd,CAAuB1C,IAAvB,CAA4B4C,KAA5B,GAAoC,KAAK5C,IAAzC;AAEA,aAAKc,QAAL,CAAcW,MAAd,CAAqB,KAAKrB,KAA1B,EAAiC,KAAKM,MAAtC;AAEAgB,QAAAA,MAAM,CAACiC,qBAAP,CAA6B,KAAKlC,MAAL,CAAYG,IAAZ,CAAiB,IAAjB,CAA7B;AACH;;AApNO;;AAuNZ,QAAI9B,MAAJ;AACH,GAzNQ,EAyNN,CAAC,IAAIA,MAAJ,EAAD,CAzNM,CAAT;AA2NAN,EAAAA,SAAS,CAAC,MAAK;AACX,QAAIoE,EAAE,GAAGlC,MAAM,CAACmC,WAAP,GAAqB,IAA9B,CADW,CAEX;;AACA3D,IAAAA,QAAQ,CAAC4D,eAAT,CAAyBC,KAAzB,CAA+BC,WAA/B,CAA2C,MAA3C,EAAoD,GAAEJ,EAAG,IAAzD;AACH,GAJQ,CAAT;AAMApE,EAAAA,SAAS,CAAC,MAAK;AACXkC,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkC,MAAM;AACxC;AACA,UAAIiC,EAAE,GAAGlC,MAAM,CAACmC,WAAP,GAAqB,IAA9B;AACA3D,MAAAA,QAAQ,CAAC4D,eAAT,CAAyBC,KAAzB,CAA+BC,WAA/B,CAA2C,MAA3C,EAAoD,GAAEJ,EAAG,IAAzD;AACC,KAJD;AAKH,GANQ,CAAT;AASA,sBACI,QAAC,MAAD,CAAQ,GAAR;AAAY,+BAAZ;AACI,IAAA,OAAO,EAAE;AAAEK,MAAAA,OAAO,EAAE;AAAX,KADb;AAEI,IAAA,OAAO,EAAE;AAAEA,MAAAA,OAAO,EAAE;AAAX,KAFb;AAGI,IAAA,UAAU,EAAE;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KAHhB;AAII,IAAA,IAAI,EAAE;AAAED,MAAAA,OAAO,EAAE;AAAX,KAJV;AAAA,2BAMI;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA,+BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ,eAII;AAAK,QAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,cAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AANJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAeH,CA5PD;;GAAMpE,K;;KAAAA,K;AA8PN,eAAeA,KAAf","sourcesContent":["import React from 'react'\nimport { useEffect } from 'react'\nimport storeImg from '../images/store.webp'\nimport displacement from '../images/diss.png'\nimport { motion } from \"framer-motion\"\nimport * as THREE from 'three'\n\n\n\nconst About = () => {\n\n    //THREE JS\n    useEffect(()=> {\n        class Sketch{\n            constructor(){\n                this.time = 0;\n                this.container = document.querySelector('.container')\n                this.scene = new THREE.Scene()\n\n                this.width = this.container.offsetWidth\n                this.height = this.container.offsetHeight\n                \n                this.camera = new THREE.PerspectiveCamera( 70, this.width / this.height, 0.01, 10)\n                this.camera.position.z = 1\n\n                this.renderer = new THREE.WebGL1Renderer({ antialias: true })\n                this.container.appendChild(this.renderer.domElement)\n                \n                this.mouse = new THREE.Vector2()\n\n                \n                this.resize()\n                this.setupResize()\n                this.addObjects()\n                this.mouseMovement()\n                this.render()\n            }\n\n            setupResize(){\n                window.addEventListener('resize', this.resize.bind(this))\n            }\n\n            mouseMovement(){\n                window.addEventListener('mousemove', (event) => {\n                    this.mouse.x = ( event.clientX / this.width ) * 2 - 1\n                    this.mouse.y = ( event.clientY / this.height ) * 2 + 1\n\n                }, false)\n            }\n\n            resize(){\n                this.width = this.container.offsetWidth\n                this.height = this.container.offsetHeight\n                this.renderer.setSize(this.width, this.height)\n                this.camera.aspect = this.width / this.height\n                this.camera.updateProjectionMatrix()\n            }\n\n            addObjects(){\n                this.geometry = new THREE.PlaneGeometry(2.1, 1.6, 40, 40)\n                this.material = new THREE.MeshNormalMaterial()\n\n                this.material = new THREE.ShaderMaterial({\n                    uniforms: {\n                        time: {type: \"f\", value: 0},\n                        mouse: {type: \"v3\", value: new THREE.Vector3()},\n                        hover: {value: new THREE.Vector2(0.5, 0.5)},\n                        hoverState: {value: 0},\n                        oceanTexture: {type: \"t\", value: new THREE.TextureLoader().load(storeImg)},\n                        displacement: {type: \"t\", value: new THREE.TextureLoader().load(displacement)},\n                        resolution: {type: \"v4\", value: new THREE.Vector4()},\n                        uvRate1: {value: new THREE.Vector2(1, 1)}\n                    },\n                    fragmentShader: `\n                        uniform sampler2D oceanTexture;\n                        uniform sampler2D displacement;\n                        varying vec2 vUv;\n                        varying float vNoise;\n                        uniform float time;\n\n\n                        varying vec3 vPosition;\n                        uniform vec3 mouse;\n\n\n                        float map(float value, float min1, float max1, float min2, float max2) {\n                        return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n                        }\n\n                        void main(){\n\n                            vec2 newUV = vUv;\n                            newUV = vec2(newUV.x, newUV.y + 0.009*sin(newUV.x*20. + time));\n                            vec4 displace = texture2D(displacement, vUv.yx );\n\n                            vec2 direction = normalize(vPosition.xy - mouse.xy);\n\n                            float dist = distance(vPosition,mouse);\n\n                            float prox = 1. - map(dist, 0., 0.3, 0., 1.);\n                            prox = clamp(prox, 0., 1.);\n\n\n                            vec2 zoomedUV = vUv + direction * prox * 0.02;\n\n                            vec2 zoomedUV1 = mix(vUv, mouse.xy + vec2(0.5), prox * 0.2);\n                            vec4 color = texture2D(oceanTexture, zoomedUV1);\n\n                            gl_FragColor = color;\n                        }\n                    `,\n                    vertexShader: `\n                        varying vec2 vUv;\n                        uniform float time;\n                        uniform vec2 hover;\n                        varying float noise;\n                        varying float vNoise;\n                        varying vec3 vPosition;\n\n                        //\tClassic Perlin 3D Noise \n                        //\tby Stefan Gustavson\n                        //\n                        vec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\n                        vec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\n                        vec3 fade(vec3 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}\n\n                        float cnoise(vec3 P){\n                        vec3 Pi0 = floor(P); // Integer part for indexing\n                        vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n                        Pi0 = mod(Pi0, 289.0);\n                        Pi1 = mod(Pi1, 289.0);\n                        vec3 Pf0 = fract(P); // Fractional part for interpolation\n                        vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n                        vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n                        vec4 iy = vec4(Pi0.yy, Pi1.yy);\n                        vec4 iz0 = Pi0.zzzz;\n                        vec4 iz1 = Pi1.zzzz;\n\n                        vec4 ixy = permute(permute(ix) + iy);\n                        vec4 ixy0 = permute(ixy + iz0);\n                        vec4 ixy1 = permute(ixy + iz1);\n\n                        vec4 gx0 = ixy0 / 7.0;\n                        vec4 gy0 = fract(floor(gx0) / 7.0) - 0.5;\n                        gx0 = fract(gx0);\n                        vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n                        vec4 sz0 = step(gz0, vec4(0.0));\n                        gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n                        gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n                        vec4 gx1 = ixy1 / 7.0;\n                        vec4 gy1 = fract(floor(gx1) / 7.0) - 0.5;\n                        gx1 = fract(gx1);\n                        vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n                        vec4 sz1 = step(gz1, vec4(0.0));\n                        gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n                        gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n                        vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n                        vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n                        vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n                        vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n                        vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n                        vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n                        vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n                        vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n                        vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n                        g000 *= norm0.x;\n                        g010 *= norm0.y;\n                        g100 *= norm0.z;\n                        g110 *= norm0.w;\n                        vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n                        g001 *= norm1.x;\n                        g011 *= norm1.y;\n                        g101 *= norm1.z;\n                        g111 *= norm1.w;\n\n                        float n000 = dot(g000, Pf0);\n                        float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n                        float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n                        float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n                        float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n                        float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n                        float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n                        float n111 = dot(g111, Pf1);\n\n                        vec3 fade_xyz = fade(Pf0);\n                        vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n                        vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n                        float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); \n                        return 2.2 * n_xyz;\n                        }\n\n\n                        void main(){\n                            vec3 newposition = position;\n                            float PI = 3.1415925;\n\n                            float noise = cnoise(3.*vec3(position.x, position.y, position.z + time/80.));\n\n                            newposition.z += 0.2*cnoise(vec3(position.x*1.,position.y*1. + time/25.,0.));\n\n                            vUv = uv;\n\n                            vPosition = position;\n\n                            gl_Position = projectionMatrix * modelViewMatrix * vec4( newposition, 1.0);\n                        }\n                    `\n                })\n\n\n                this.mesh = new THREE.Mesh(this.geometry, this.material)\n                this.scene.add(this.mesh)\n            }\n\n            render(){\n                this.time+=0.05\n\n                this.material.uniforms.time.value = this.time\n\n                this.renderer.render(this.scene, this.camera)\n\n                window.requestAnimationFrame(this.render.bind(this))\n            }\n        }\n\n        new Sketch()\n    }, [new Sketch])\n\n    useEffect(()=> {\n        let vh = window.innerHeight * 0.01;\n        // Then we set the value in the --vh custom property to the root of the document\n        document.documentElement.style.setProperty('--vh', `${vh}px`);\n    })\n\n    useEffect(()=> {\n        window.addEventListener('resize', () => {\n        // We execute the same script as before\n        let vh = window.innerHeight * 0.01;\n        document.documentElement.style.setProperty('--vh', `${vh}px`);\n        });\n    })\n\n\n    return (\n        <motion.div data-scroll-section\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ duration: 1 }}\n            exit={{ opacity: 0 }}\n        >\n            <div className=\"about-page\">\n                <div className=\"about-page__text\">\n                    <p>9 Fifty is deeply rooted in street culture with a luxury aesthetic. We grew to embody culture, and play an integral part in its constant regeneration. Skaters, punks, hip-hop heads and the young counter culture at large. 9 Fifty established itself as a brand known for its quality, style, and authenticity, made for artists, photographers, designers, musicians, filmmakers, and writers who defied conventions and contributed to its unique identity and attitude.</p>\n                </div>\n                <div className=\"container\"></div>\n            </div>\n        </motion.div>\n    )\n}\n\nexport default About\n"]},"metadata":{},"sourceType":"module"}