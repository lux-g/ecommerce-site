{"ast":null,"code":"import React from'react';import{useEffect}from'react';import*as THREE from\"three\";import images from'../images';import{Link}from'react-router-dom';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Header=function Header(){// //THREE JS \n// useEffect(()=> {\n//     function lerp(start, end, t){\n//         return start * (1 - t) + end * t;\n//     }\n//     //mouse cords\n//     let targetX = 0;\n//     let targetY = 0;\n//     //load image textures for mesh\n//     const textureOne = new THREE.TextureLoader().load(images.imageOne);\n//     const textureTwo = new THREE.TextureLoader().load(images.imageTwo);\n//     const textureThree = new THREE.TextureLoader().load(images.imageThree);\n//     class webgl{\n//         constructor(){\n//             this.container = document.querySelector('main');\n//             this.links = [...document.querySelectorAll('span')];\n//             this.scene = new THREE.Scene();\n//             this.perspective = 1000;\n//             this.sizes = new THREE.Vector2(0, 0); //mesh sizes\n//             this.offset = new THREE.Vector2(0, 0) //mesh position\n//             this.uniforms = {\n//                 uTexture: { value: textureOne},\n//                 uAlpha: { value: 0.0},//opacity of mesh\n//                 uOffset: { value: new THREE.Vector2(0.0, 0.0)}//postion of mesh for curve efx\n//             }\n//             this.links.forEach((link, idx)=> {\n//                 link.addEventListener('mouseenter', ()=> {\n//                     switch(idx){\n//                         case 0:\n//                             this.uniforms.uTexture.value = textureOne;\n//                             break;\n//                         case 1: \n//                             this.uniforms.uTexture.value = textureTwo;\n//                             break;\n//                         case 2:\n//                             this.uniforms.uTexture.value = textureThree;\n//                             break;\n//                     }\n//                 })\n//             })\n//             this.addEventListeners(document.querySelector('h1'));\n//             this.setupCamera();\n//             this.onMouseMove();\n//             this.createMesh();\n//             this.render();\n//         }\n//         get viewport(){\n//             let width = window.innerWidth;\n//             let height = window.innerHeight;\n//             let aspectRatio = width / height;\n//             return {\n//                 width,\n//                 height,\n//                 aspectRatio\n//             }\n//         }\n//         onMouseMove(){\n//             window.addEventListener('mousemove', (e)=> {\n//                 targetX = e.clientX;\n//                 targetY = e.clientY;\n//             })\n//         }\n//         addEventListeners(element){\n//             element.addEventListener('mouseenter', ()=> {\n//                 this.linksHover = true;\n//             })\n//             element.addEventListener('mouseleave', ()=> {\n//                 this.linksHover = false;\n//             })\n//         }\n//         setupCamera(){\n//             //adjust dimensions on resize\n//             window.addEventListener('resize', this.onWindowResize.bind(this))\n//             let fov = (180 * (2 * Math.atan(this.viewport.height / 2 / this.perspective))) / Math.PI;\n//             this.camera = new THREE.PerspectiveCamera(fov, this.viewport.aspectRatio, 0.1, 1000);\n//             this.camera.position.set(0, 0 , this.perspective);\n//             this.renderer = new THREE.WebGL1Renderer({antialias: true,alpha: true });\n//             this.renderer.setSize(this.viewport.width, this.viewport.height);\n//             this.renderer.setPixelRatio(window.devicePixelRatio);\n//             this.container.appendChild(this.renderer.domElement)\n//         }\n//         onWindowResize(){\n//             this.camera.aspect = this.viewport.aspectRatio;\n//             this.camera.fov = (180 * (2 * Math.atan(this.viewport.height / 2 / this.perspective))) / Math.PI;\n//             this.renderer.setSize(this.viewport.width, this.viewport.height);\n//             this.camera.updateProjectionMatrix();\n//         }\n//         createMesh(){\n//             this.geometry = new THREE.PlaneBufferGeometry(1, 1, 20, 20);\n//             //this.material = new THREE.MeshBasicMaterial({color: 0xff0000});\n//             this.material = new THREE.ShaderMaterial({\n//                 uniforms: this.uniforms,\n//                 vertexShader: `\n//                     uniform sampler2D uTexture;\n//                     uniform vec2 uOffset;\n//                     varying vec2 vUv;\n//                     float M_PI = 3.141529;\n//                     vec3 deformationCurve(vec3 position, vec2 uv, vec2 offset){\n//                         position.x = position.x + (sin(uv.y * M_PI) * offset.x);\n//                         position.y = position.y + (sin(uv.x * M_PI) * offset.y);\n//                         return position;\n//                     }\n//                     void main(){\n//                         vUv = uv;\n//                         vec3 newPosition = deformationCurve(position, uv, uOffset);\n//                         gl_Position = projectionMatrix * modelViewMatrix * vec4(newPosition, 1.0);\n//                     }\n//                 `,\n//                 fragmentShader: `\n//                     uniform sampler2D uTexture;\n//                     uniform float uAlpha;\n//                     uniform vec2 uOffset;\n//                     varying vec2 vUv;\n//                     vec3 rgbShift(sampler2D textureimage, vec2 uv, vec2 offset ){\n//                         float r = texture2D(textureimage, uv + offset).r;\n//                         vec2 gb = texture2D(textureimage, uv).gb;\n//                         return vec3(r, gb);\n//                     }\n//                     void main(){\n//                         // vec3 color = texture2D(uTexture, vUv).rgb;\n//                         vec3 color = rgbShift(uTexture, vUv, uOffset);\n//                         gl_FragColor = vec4(color, uAlpha);\n//                     }\n//                 `,\n//                 transparent: true\n//             })\n//             this.mesh = new THREE.Mesh(this.geometry, this.material);\n//             this.sizes.set(250, 350, 1);\n//             this.mesh.scale.set(this.sizes.x, this.sizes.y, 1);\n//             this.mesh.position.set(this.offset.x, this.offset.y);\n//             this.scene.add(this.mesh);\n//         }\n//         render(){\n//             this.renderer.render(this.scene, this.camera);\n//             this.offset.x = lerp(this.offset.x, targetX, 0.1);\n//             this.offset.y = lerp(this.offset.y, targetY, 0.1);\n//             //this.uniforms.uOffset.value.set((targetX - this.offset.x) * 0.0005, - (targetY - this.offset.y) * 0.0005);\n//             this.linksHover\n//             ? this.uniforms.uAlpha.value = lerp(this.uniforms.uAlpha.value, 1.0, 1.0)\n//             : this.uniforms.uAlpha.value = lerp(this.uniforms.uAlpha.value, 0.0, 0.1)\n//             this.mesh.position.set(this.offset.x - (window.innerWidth / 2), -this.offset.y + (window.innerHeight / 2));\n//             window.requestAnimationFrame(this.render.bind(this));\n//         }\n//     }\n//     new webgl();\n// })\nreturn/*#__PURE__*/_jsx(\"main\",{children:/*#__PURE__*/_jsx(\"div\",{className:\"hero\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"hero__title\",children:[/*#__PURE__*/_jsxs(\"h1\",{children:[/*#__PURE__*/_jsx(\"span\",{className:\"hero__nine\",children:\"NINE\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"span\",{className:\"hero__fifty\",children:\"FIFTY\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"span\",{className:\"her__store\",children:\"STORE\"})]}),/*#__PURE__*/_jsx(\"p\",{className:\"quality\",children:\"QUALITY STREETWEAR CLOTHING\"}),/*#__PURE__*/_jsx(Link,{to:\"/about\",className:\"hero__about\",children:\"ABOUT US\"}),/*#__PURE__*/_jsx(Link,{to:\"/shop\",className:\"hero__shop\",children:\"SHOP NOW\"})]})})});};export default Header;","map":{"version":3,"sources":["/Users/lux/Desktop/websites/REACT/THREEJS-ECOMMERCE/three-site/src/components/Header.js"],"names":["React","useEffect","THREE","images","Link","Header"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,SAAT,KAAyB,OAAzB,CACA,MAAO,GAAKC,CAAAA,KAAZ,KAAuB,OAAvB,CACA,MAAOC,CAAAA,MAAP,KAAmB,WAAnB,CACA,OAASC,IAAT,KAAqB,kBAArB,C,wFAGA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,EAAM,CAEjB;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AAEA,mBACI,mCACI,YAAK,SAAS,CAAC,MAAf,uBACI,aAAK,SAAS,CAAC,aAAf,wBACI,mCACI,aAAM,SAAS,CAAC,YAAhB,kBADJ,cAEI,aAFJ,cAGI,aAAM,SAAS,CAAC,aAAhB,mBAHJ,cAII,aAJJ,cAKI,aAAM,SAAS,CAAC,YAAhB,mBALJ,GADJ,cAQI,UAAG,SAAS,CAAC,SAAb,yCARJ,cASI,KAAC,IAAD,EAAM,EAAE,CAAC,QAAT,CAAkB,SAAS,CAAC,aAA5B,sBATJ,cAUI,KAAC,IAAD,EAAM,EAAE,CAAC,OAAT,CAAiB,SAAS,CAAC,YAA3B,sBAVJ,GADJ,EADJ,EADJ,CAkBH,CA9LD,CAgMA,cAAeA,CAAAA,MAAf","sourcesContent":["import React from 'react'\nimport { useEffect} from 'react'\nimport * as THREE from \"three\";\nimport images from '../images'\nimport { Link } from 'react-router-dom'\n\n\nconst Header = () => {\n\n    // //THREE JS \n    // useEffect(()=> {\n    //     function lerp(start, end, t){\n    //         return start * (1 - t) + end * t;\n    //     }\n\n    //     //mouse cords\n    //     let targetX = 0;\n    //     let targetY = 0;\n\n    //     //load image textures for mesh\n    //     const textureOne = new THREE.TextureLoader().load(images.imageOne);\n    //     const textureTwo = new THREE.TextureLoader().load(images.imageTwo);\n    //     const textureThree = new THREE.TextureLoader().load(images.imageThree);\n\n    //     class webgl{\n    //         constructor(){\n    //             this.container = document.querySelector('main');\n    //             this.links = [...document.querySelectorAll('span')];\n    //             this.scene = new THREE.Scene();\n    //             this.perspective = 1000;\n    //             this.sizes = new THREE.Vector2(0, 0); //mesh sizes\n    //             this.offset = new THREE.Vector2(0, 0) //mesh position\n    //             this.uniforms = {\n    //                 uTexture: { value: textureOne},\n    //                 uAlpha: { value: 0.0},//opacity of mesh\n    //                 uOffset: { value: new THREE.Vector2(0.0, 0.0)}//postion of mesh for curve efx\n    //             }\n    //             this.links.forEach((link, idx)=> {\n    //                 link.addEventListener('mouseenter', ()=> {\n    //                     switch(idx){\n    //                         case 0:\n    //                             this.uniforms.uTexture.value = textureOne;\n    //                             break;\n    //                         case 1: \n    //                             this.uniforms.uTexture.value = textureTwo;\n    //                             break;\n    //                         case 2:\n    //                             this.uniforms.uTexture.value = textureThree;\n    //                             break;\n    //                     }\n    //                 })\n    //             })\n\n    //             this.addEventListeners(document.querySelector('h1'));\n    //             this.setupCamera();\n    //             this.onMouseMove();\n    //             this.createMesh();\n    //             this.render();\n    //         }\n\n    //         get viewport(){\n    //             let width = window.innerWidth;\n    //             let height = window.innerHeight;\n    //             let aspectRatio = width / height;\n\n    //             return {\n    //                 width,\n    //                 height,\n    //                 aspectRatio\n    //             }\n    //         }\n\n    //         onMouseMove(){\n    //             window.addEventListener('mousemove', (e)=> {\n    //                 targetX = e.clientX;\n    //                 targetY = e.clientY;\n    //             })\n    //         }\n\n    //         addEventListeners(element){\n    //             element.addEventListener('mouseenter', ()=> {\n    //                 this.linksHover = true;\n    //             })\n    //             element.addEventListener('mouseleave', ()=> {\n    //                 this.linksHover = false;\n    //             })\n    //         }\n\n    //         setupCamera(){\n    //             //adjust dimensions on resize\n    //             window.addEventListener('resize', this.onWindowResize.bind(this))\n                \n    //             let fov = (180 * (2 * Math.atan(this.viewport.height / 2 / this.perspective))) / Math.PI;\n    //             this.camera = new THREE.PerspectiveCamera(fov, this.viewport.aspectRatio, 0.1, 1000);\n    //             this.camera.position.set(0, 0 , this.perspective);\n\n    //             this.renderer = new THREE.WebGL1Renderer({antialias: true,alpha: true });\n    //             this.renderer.setSize(this.viewport.width, this.viewport.height);\n    //             this.renderer.setPixelRatio(window.devicePixelRatio);\n    //             this.container.appendChild(this.renderer.domElement)\n    //         }\n\n    //         onWindowResize(){\n    //             this.camera.aspect = this.viewport.aspectRatio;\n    //             this.camera.fov = (180 * (2 * Math.atan(this.viewport.height / 2 / this.perspective))) / Math.PI;\n    //             this.renderer.setSize(this.viewport.width, this.viewport.height);\n    //             this.camera.updateProjectionMatrix();\n    //         }\n\n    //         createMesh(){\n    //             this.geometry = new THREE.PlaneBufferGeometry(1, 1, 20, 20);\n    //             //this.material = new THREE.MeshBasicMaterial({color: 0xff0000});\n    //             this.material = new THREE.ShaderMaterial({\n    //                 uniforms: this.uniforms,\n    //                 vertexShader: `\n    //                     uniform sampler2D uTexture;\n    //                     uniform vec2 uOffset;\n    //                     varying vec2 vUv;\n\n    //                     float M_PI = 3.141529;\n\n    //                     vec3 deformationCurve(vec3 position, vec2 uv, vec2 offset){\n    //                         position.x = position.x + (sin(uv.y * M_PI) * offset.x);\n    //                         position.y = position.y + (sin(uv.x * M_PI) * offset.y);\n    //                         return position;\n    //                     }\n\n    //                     void main(){\n    //                         vUv = uv;\n    //                         vec3 newPosition = deformationCurve(position, uv, uOffset);\n    //                         gl_Position = projectionMatrix * modelViewMatrix * vec4(newPosition, 1.0);\n    //                     }\n    //                 `,\n    //                 fragmentShader: `\n    //                     uniform sampler2D uTexture;\n    //                     uniform float uAlpha;\n    //                     uniform vec2 uOffset;\n    //                     varying vec2 vUv;\n\n    //                     vec3 rgbShift(sampler2D textureimage, vec2 uv, vec2 offset ){\n    //                         float r = texture2D(textureimage, uv + offset).r;\n    //                         vec2 gb = texture2D(textureimage, uv).gb;\n    //                         return vec3(r, gb);\n    //                     }\n\n    //                     void main(){\n    //                         // vec3 color = texture2D(uTexture, vUv).rgb;\n    //                         vec3 color = rgbShift(uTexture, vUv, uOffset);\n    //                         gl_FragColor = vec4(color, uAlpha);\n    //                     }\n    //                 `,\n    //                 transparent: true\n    //             })\n    //             this.mesh = new THREE.Mesh(this.geometry, this.material);\n    //             this.sizes.set(250, 350, 1);\n    //             this.mesh.scale.set(this.sizes.x, this.sizes.y, 1);\n    //             this.mesh.position.set(this.offset.x, this.offset.y);\n    //             this.scene.add(this.mesh);\n    //         }\n\n    //         render(){\n    //             this.renderer.render(this.scene, this.camera);\n    //             this.offset.x = lerp(this.offset.x, targetX, 0.1);\n    //             this.offset.y = lerp(this.offset.y, targetY, 0.1);\n    //             //this.uniforms.uOffset.value.set((targetX - this.offset.x) * 0.0005, - (targetY - this.offset.y) * 0.0005);\n\n    //             this.linksHover\n    //             ? this.uniforms.uAlpha.value = lerp(this.uniforms.uAlpha.value, 1.0, 1.0)\n    //             : this.uniforms.uAlpha.value = lerp(this.uniforms.uAlpha.value, 0.0, 0.1)\n\n    //             this.mesh.position.set(this.offset.x - (window.innerWidth / 2), -this.offset.y + (window.innerHeight / 2));\n    //             window.requestAnimationFrame(this.render.bind(this));\n    //         }\n    //     }\n\n\n    //     new webgl();\n    // })\n\n    return (\n        <main>\n            <div className=\"hero\">\n                <div className=\"hero__title\">\n                    <h1>\n                        <span className=\"hero__nine\">NINE</span> \n                        <br/> \n                        <span className=\"hero__fifty\">FIFTY</span>\n                        <br/>\n                        <span className=\"her__store\">STORE</span>\n                    </h1>\n                    <p className=\"quality\">QUALITY STREETWEAR CLOTHING</p>\n                    <Link to=\"/about\" className=\"hero__about\">ABOUT US</Link>\n                    <Link to=\"/shop\" className=\"hero__shop\">SHOP NOW</Link>\n                </div>\n            </div>\n        </main>\n    )\n}\n\nexport default Header\n"]},"metadata":{},"sourceType":"module"}